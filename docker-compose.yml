# docker-compose.yml
version: '3.8'

services:
  frontend:
    build: ./web/frontend
    ports:
      - "443:443"
    depends_on:
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      - VITE_API_URL=http://backend:3000/api

  backend:
    build: ./web/backend
    ports:
      - "3000:3000"
    environment:
      - DB_URL=postgres://admin:password@db:5432/app
      - REDIS_URL=redis://redis:6379
    env_file:
      - ./web/backend/.env
    depends_on:
      - db
      - redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  db:
    image: postgres:15
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./web/db/init:/docker-entrypoint-initdb.d
      - ./web/db/init/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=app
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d app"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  redis:
    image: redis:7
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Временное отключение сервиса nginx (если используете только frontend)
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "443:443"
  #   volumes:
  #     - ./web/nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./web/nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     frontend:
  #       condition: service_healthy
  #     backend:
  #       condition: service_healthy
  #   networks:
  #     - app-network
  #   restart: always
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:443"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 20s

networks:
  app-network:
    driver: bridge

volumes:
  db_data: